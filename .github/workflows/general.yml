name: Rust CI/CD backend

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
    test:
        name: Test with Database, Redis and MinIO
        runs-on: ubuntu-latest
        timeout-minutes: 30
        
        # Service containers to run alongside the `test` container job
        services:
          postgres:
            image: postgres:14
            env:
              POSTGRES_USER: ${{secrets.POSTGRES_USER}}
              POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
              POSTGRES_DB: evolveme_db
            ports:
              - 5432:5432
          
          redis:
            image: redis:7-alpine
            env:
              REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
            ports:
              - 6379:6379
            options: >-
              --health-cmd "redis-cli ping"
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
              --entrypoint ""
              --command sh -c "redis-server --requirepass $REDIS_PASSWORD"

          minio:
            image: bitnami/minio:latest
            env:
              MINIO_ROOT_USER: ${{ secrets.MINIO_ACCESS_KEY }}
              MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_SECRET_KEY }}
            ports:
              - 9000:9000
              - 9001:9001
            options: >-
              --health-cmd "curl -f http://localhost:9000/minio/health/ready"
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
        
        env:
          POSTGRES__DATABASE__USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES__DATABASE__PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          APP__APPLICATION__USER: ${{ secrets.APP_USER }}
          APP__APPLICATION__PASSWORD: ${{ secrets.APP_PASSWORD }}
          APP_ENVIRONMENT: local
          REDIS__REDIS__PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/evolveme_db
          MINIO__MINIO__ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO__MINIO__SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4
    
            - name: Install the Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1

            - name: Install system dependencies
              run: |
                sudo apt-get update
                sudo apt-get install -y postgresql-client redis-tools curl

            - name: Install sqlx-cli
              run: |
                if ! command -v sqlx &> /dev/null; then
                  echo "Installing sqlx-cli..."
                  cargo install sqlx-cli \
                    --version=${{ vars.SQLX_CLI_VERSION || '0.8.3' }} \
                    --features ${{ vars.SQLX_CLI_FEATURES || 'postgres' }} \
                    --no-default-features \
                    --locked
                else
                  echo "sqlx-cli already installed"
                fi
                sqlx --version

            - name: Setup database and services
              run: |                
                # Run the CI initialization
                ./scripts/init_db_and_redis_ci.sh

            - name: Generate SQLx prepare files
              env:
                RUSTFLAGS: "-A warnings"
                SQLX_OFFLINE: false
              run: |
                cargo sqlx prepare --workspace -- --all-targets

            - name: Run tests
              env:
                RUSTFLAGS: "-A warnings"
                SQLX_OFFLINE: false
              run: |
                echo "Running tests..."
                cargo test --all -- --test-threads=1
                
            - name: Check SQLx queries are fresh
              env:
                RUSTFLAGS: "-A warnings"
              run: |
                cargo sqlx prepare --workspace --check -- --all-targets

    build_and_push:
      name: Build and Push Multi-Architecture Docker image
      needs: [test]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
          
        - name: Set up QEMU for multi-architecture builds
          uses: docker/setup-qemu-action@v3
          
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          
        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            
        - name: Extract metadata for Docker
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ghcr.io/${{ github.repository }}
            tags: |
              type=sha,format=long
              type=ref,event=branch
              latest
              
        - name: Build and push multi-architecture Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            platforms: linux/amd64,linux/arm64
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max